from MeshLib.Geometry import *
import MeshLib.Mesh

def LoadPLYFile(fileName, rmReduntVerts):
	'''
	Load a .ply file, return vertices, faces, normals and textures
	There are some restrictions for the imported .ply formate:
	1. Only ASCII format supported;
	2. Only geometry and topology information loaded;
	3. Only accept list format of face's representation
	4. Vertex info must before face info
	'''
	verts = []; faces = [];	normals = []; textures = []
	typeMaps = {'char':int, 'uchar':int, 'short':int, 'ushort':int, 'int':int, 'uint':int, 'float':float, 'double':float}
	vertType = []; faceType = []
	vertPos = [-1, -1, -1]; 
	nVert = -1; nFace = -1
	header = []

	# read headers
	file = open(fileName)
	curLine = file.readline()
	while curLine.rstrip().lower() != 'end_header':
		header.append(curLine.rstrip().lower())
		curLine = file.readline()
	header = [h for h in header if h != '' and 'comment' not in h]
	# split headers with 'element'
	elementIndices = []
	for hi in range(0, len(header)):
		if 'element ' not in header[hi]: continue
		elementIndices.append(hi)
	elementIndices.append(len(header))
	# parse header
	for i in range(0, len(elementIndices)-1):
		primitive = header[elementIndices[i]].split(' ')[1]

		if primitive == 'vertex':
			nVert = int(header[elementIndices[i]].split(' ')[2])
			for j in range(elementIndices[i]+1, elementIndices[i+1]):
				parts = header[j].split(' ')
				vertType.append(typeMaps[parts[1]])
				if parts[2] == 'x': vertPos[0] = j - elementIndices[i]-1
				elif parts[2] == 'y': vertPos[1] = j - elementIndices[i]-1
				elif parts[2] == 'z': vertPos[2] = j - elementIndices[i]-1
		elif primitive == 'face':
			nFace = int(header[elementIndices[i]].split(' ')[2])
	
	# laod content
	vert2index = dict()
	realIndex = []
	for i in range(0, nVert):
		curLine = file.readline().rstrip()
		if rmReduntVerts and curLine in realIndex:
			realIndex.append(vert2index[curLine])
			continue
		if rmReduntVerts:
			realIndex.append(len(verts))
			vert2index[curLine] = len(verts)

		parts = curLine.split(' ')
		x = vertType[vertPos[0]](parts[vertPos[0]])
		y = vertType[vertPos[1]](parts[vertPos[1]])
		z = vertType[vertPos[2]](parts[vertPos[2]])
		verts.append(MeshLib.Mesh.Vertex(Vector3D(x, y, z)))
	for i in range(0, nFace):
		parts = file.readline().rstrip().split(' ')
		vertList = [int(parts[j]) for j in range(1, len(parts))]
		if rmReduntVerts: vertList = [realIndex[v] for v in vertList]
		faces.append(MeshLib.Mesh.Face(vertList))

	file.close()
	return (verts, faces, normals, textures)


def SavePLYFile(fileName, verts, faces, normals, textures):
	output = open(fileName, 'w')
	output.write('ply\n')
	output.write('format ascii 1.0\n')
	output.write('comment generated by MeshLib\n')
	output.write('element vertex %d\n' % len(verts))
	output.write('property float x\n')
	output.write('property float y\n')
	output.write('property float z\n')
	output.write('element face %d\n' % len(faces))
	output.write('property list uchar int vertex_index\n')
	output.write('end_header\n')

	for v in verts:
		output.write('%f %f %f\n' % (v[0], v[1], v[2]))
	for f in faces:
		output.write(str(len(f)))
		for fi in f:
			output.write(' ' + str(fi))
		output.write('\n')
	output.close()
